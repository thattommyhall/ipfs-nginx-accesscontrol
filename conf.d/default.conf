proxy_connect_timeout 5s;
proxy_buffering off;

proxy_read_timeout 600s;
proxy_send_timeout 600s;
error_log /dev/stdout info;
# error_log /dev/stdout;

# These are unfortunately still hardcoded in go-ipfs.
# We're removing them from the upstream response so they
# don't mess with the additional header we set.
proxy_hide_header Access-Control-Allow-Headers;
proxy_hide_header Access-Control-Expose-Headers;

# We have to set this header in go-ipfs because otherwise
# it'll do it's origin check based on its defaults (localhost et al).
proxy_hide_header Access-Control-Allow-Origin;

lua_package_path "/etc/nginx/conf.d/lua/?.lua;;";
lua_shared_dict allowed 100m;
lua_shared_dict denied 100m;
lua_shared_dict sha256 100m;

# lua_code_cache off;

init_by_lua_block {
  require "cjson"
  require "resty.http"
  require "resty.string"
  require "resty.sha256"
}

# init_worker_by_lua_file "/etc/nginx/conf.d/lua/init_worker.lua";

resolver 127.0.0.11 ipv6=off;

upstream backend {
  server ipfs:8080;
  keepalive 64;
}

server {
  listen 80;

  location = /refresh {
    content_by_lua_file "/etc/nginx/conf.d/lua/refresh.lua";
  }

  location = /statusz {
    default_type  text/plain;
    content_by_lua_file "/etc/nginx/conf.d/lua/status.lua";
  }

  location = /noop {
    default_type text/plain;
    return 200;
  }

  location / {
    rewrite_by_lua_file "/etc/nginx/conf.d/lua/rewrite-check.lua";
    # proxy_set_header X-Ipfs-Gateway-Prefix "";
    # proxy_set_header Host $host;
    # proxy_pass http://backend;
    # proxy_buffering on;
    default_type text/plain;
    content_by_lua 'ngx.exit(200)';
  }
}
